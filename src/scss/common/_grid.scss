.container {
  width: $container-default-width;
  max-width: 100%;
  padding-left: $grid-gutter-width;
  padding-right: $grid-gutter-width;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

@each $container-max-width in map-keys($container-max-widths) {
  .container-#{$container-max-width} {
    width: map-get($container-max-widths, $container-max-width);
    max-width: 100%;
    padding-left: $grid-gutter-width;
    padding-right: $grid-gutter-width;
  }
}

$grid: (
        columns: $grid-columns,
        gutter: 0,
);

$grid-gutter: (
        columns: $grid-columns,
        gutter: $grid-gutter-width,
);

.grid-row {
  clear: both;
  @include grid-container;
}

.gutter-collapse {
  @include grid-collapse($grid-gutter);
}

@for $i from 1 through $grid-columns {
  // Default
  .col-#{$i} {
    @include grid-column($i, $grid);
    .grid-gutter > & {
      @include grid-column($i, $grid-gutter);
    }
  }
}

@each $breakpoint in map-keys($media-breakpoints) {
  @for $i from 1 through $grid-columns {

    $media-query: map-get($media-breakpoints, $breakpoint);

    $grid-responsive: (
            columns: $grid-columns,
            gutter: 0,
            media: "(min-width: #{$media-query})",
    ) !default;

    $grid-gutter: (
            columns: $grid-columns,
            gutter: $grid-gutter-width,
            media: "(min-width: #{$media-query})",
    );

    @if $media-query > 0 {
      @include grid-media($grid-responsive) {
        .col-#{$breakpoint}-#{$i} {
          @include grid-column($i);
        }
      }
      @include grid-media($grid-gutter) {
        .grid-gutter > .col-#{$breakpoint}-#{$i} {
          @include grid-column($i);
        }
      }
    }

  }
}